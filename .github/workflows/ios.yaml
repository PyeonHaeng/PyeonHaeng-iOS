name: iOS CI workflow

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
    types: [labeled, opened, synchronize, reopened]

jobs:
  check-swift-format:
    name: Check for Possible Changes with SwiftFormat
    runs-on: macos-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4
      - name: Install Swiftformat
        run: brew install swiftformat
      - name: Run Swiftformat
        run: swiftformat . --config .swiftformat
      - name: Check for changes
        run: |
          git diff
          if [[ `git status --porcelain` ]]; then
            echo "Code was formatted. Failing the job."
            exit 1
          fi

  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.2"
      - name: Create Shared.xcconfig
        env:
          APPCONFIG: ${{ secrets.XCCONFIG }}
        run: |
          mkdir -p XCConfig
          echo $APPCONFIG | base64 --decode > ./XCConfig/Shared.xcconfig
      - name: Create GoogleService-Info.plist
        env:
          GOOGLE_SERVICE_INFO_BASE64: ${{ secrets.GOOGLE_INFO_PLIST }}
        run: |
          echo $GOOGLE_SERVICE_INFO_BASE64 | base64 --decode > ./PyeonHaeng-iOS/Resources/GoogleService-Info.plist
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
